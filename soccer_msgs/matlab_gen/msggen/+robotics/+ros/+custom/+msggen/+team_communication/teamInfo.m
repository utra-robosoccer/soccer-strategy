classdef teamInfo < robotics.ros.Message
    %teamInfo MATLAB implementation of team_communication/teamInfo
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'team_communication/teamInfo' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '62e0233a46384cfde160a8ef47b7cd65' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        TeamCommunicationRobotInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('team_communication/robotInfo') % Dispatch to MATLAB class for message type team_communication/robotInfo
    end
    
    properties (Dependent)
        TeamNum
        TeamColour
        Score
        PenaltyShot
        SingleShots
        CoachSequence
        Coach
        CoachMessage
        Players
    end
    
    properties (Access = protected)
        Cache = struct('Coach', [], 'Players', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Coach', 'CoachMessage', 'CoachSequence', 'PenaltyShot', 'Players', 'Score', 'SingleShots', 'TeamColour', 'TeamNum'} % List of non-constant message properties
        ROSPropertyList = {'coach', 'coachMessage', 'coachSequence', 'penaltyShot', 'players', 'score', 'singleShots', 'teamColour', 'teamNum'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = teamInfo(msg)
            %teamInfo Construct the message object teamInfo
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function teamnum = get.TeamNum(obj)
            %get.TeamNum Get the value for property TeamNum
            teamnum = typecast(int8(obj.JavaMessage.getTeamNum), 'uint8');
        end
        
        function set.TeamNum(obj, teamnum)
            %set.TeamNum Set the value for property TeamNum
            validateattributes(teamnum, {'numeric'}, {'nonempty', 'scalar'}, 'teamInfo', 'TeamNum');
            
            obj.JavaMessage.setTeamNum(teamnum);
        end
        
        function teamcolour = get.TeamColour(obj)
            %get.TeamColour Get the value for property TeamColour
            teamcolour = typecast(int8(obj.JavaMessage.getTeamColour), 'uint8');
        end
        
        function set.TeamColour(obj, teamcolour)
            %set.TeamColour Set the value for property TeamColour
            validateattributes(teamcolour, {'numeric'}, {'nonempty', 'scalar'}, 'teamInfo', 'TeamColour');
            
            obj.JavaMessage.setTeamColour(teamcolour);
        end
        
        function score = get.Score(obj)
            %get.Score Get the value for property Score
            score = typecast(int8(obj.JavaMessage.getScore), 'uint8');
        end
        
        function set.Score(obj, score)
            %set.Score Set the value for property Score
            validateattributes(score, {'numeric'}, {'nonempty', 'scalar'}, 'teamInfo', 'Score');
            
            obj.JavaMessage.setScore(score);
        end
        
        function penaltyshot = get.PenaltyShot(obj)
            %get.PenaltyShot Get the value for property PenaltyShot
            penaltyshot = typecast(int8(obj.JavaMessage.getPenaltyShot), 'uint8');
        end
        
        function set.PenaltyShot(obj, penaltyshot)
            %set.PenaltyShot Set the value for property PenaltyShot
            validateattributes(penaltyshot, {'numeric'}, {'nonempty', 'scalar'}, 'teamInfo', 'PenaltyShot');
            
            obj.JavaMessage.setPenaltyShot(penaltyshot);
        end
        
        function singleshots = get.SingleShots(obj)
            %get.SingleShots Get the value for property SingleShots
            singleshots = typecast(int16(obj.JavaMessage.getSingleShots), 'uint16');
        end
        
        function set.SingleShots(obj, singleshots)
            %set.SingleShots Set the value for property SingleShots
            validateattributes(singleshots, {'numeric'}, {'nonempty', 'scalar'}, 'teamInfo', 'SingleShots');
            
            obj.JavaMessage.setSingleShots(singleshots);
        end
        
        function coachsequence = get.CoachSequence(obj)
            %get.CoachSequence Get the value for property CoachSequence
            coachsequence = typecast(int8(obj.JavaMessage.getCoachSequence), 'uint8');
        end
        
        function set.CoachSequence(obj, coachsequence)
            %set.CoachSequence Set the value for property CoachSequence
            validateattributes(coachsequence, {'numeric'}, {'nonempty', 'scalar'}, 'teamInfo', 'CoachSequence');
            
            obj.JavaMessage.setCoachSequence(coachsequence);
        end
        
        function coach = get.Coach(obj)
            %get.Coach Get the value for property Coach
            if isempty(obj.Cache.Coach)
                obj.Cache.Coach = feval(obj.TeamCommunicationRobotInfoClass, obj.JavaMessage.getCoach);
            end
            coach = obj.Cache.Coach;
        end
        
        function set.Coach(obj, coach)
            %set.Coach Set the value for property Coach
            validateattributes(coach, {obj.TeamCommunicationRobotInfoClass}, {'nonempty', 'scalar'}, 'teamInfo', 'Coach');
            
            obj.JavaMessage.setCoach(coach.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Coach)
                obj.Cache.Coach.setJavaObject(coach.getJavaObject);
            end
        end
        
        function coachmessage = get.CoachMessage(obj)
            %get.CoachMessage Get the value for property CoachMessage
            javaArray = obj.JavaMessage.getCoachMessage;
            array = obj.readJavaArray(javaArray, 'uint8');
            coachmessage = uint8(array);
        end
        
        function set.CoachMessage(obj, coachmessage)
            %set.CoachMessage Set the value for property CoachMessage
            validateattributes(coachmessage, {'numeric'}, {'vector', 'numel', 253}, 'teamInfo', 'CoachMessage');
            
            javaArray = obj.JavaMessage.getCoachMessage;
            array = obj.writeJavaArray(coachmessage, javaArray, 'uint8');
            obj.JavaMessage.setCoachMessage(array);
        end
        
        function players = get.Players(obj)
            %get.Players Get the value for property Players
            if isempty(obj.Cache.Players)
                javaArray = obj.JavaMessage.getPlayers;
                array = obj.readJavaArray(javaArray, obj.TeamCommunicationRobotInfoClass);
                obj.Cache.Players = feval(obj.TeamCommunicationRobotInfoClass, array);
            end
            players = obj.Cache.Players;
        end
        
        function set.Players(obj, players)
            %set.Players Set the value for property Players
            validateattributes(players, {obj.TeamCommunicationRobotInfoClass}, {'vector', 'numel', 11}, 'teamInfo', 'Players');
            
            javaArray = obj.JavaMessage.getPlayers;
            array = obj.writeJavaArray(players, javaArray, obj.TeamCommunicationRobotInfoClass);
            obj.JavaMessage.setPlayers(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Players)
                obj.Cache.Players = [];
                obj.Cache.Players = obj.Players;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Coach = [];
            obj.Cache.Players = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.TeamNum = obj.TeamNum;
            cpObj.TeamColour = obj.TeamColour;
            cpObj.Score = obj.Score;
            cpObj.PenaltyShot = obj.PenaltyShot;
            cpObj.SingleShots = obj.SingleShots;
            cpObj.CoachSequence = obj.CoachSequence;
            cpObj.CoachMessage = obj.CoachMessage;
            
            % Recursively copy compound properties
            cpObj.Coach = copy(obj.Coach);
            cpObj.Players = copy(obj.Players);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.TeamNum = strObj.TeamNum;
            obj.TeamColour = strObj.TeamColour;
            obj.Score = strObj.Score;
            obj.PenaltyShot = strObj.PenaltyShot;
            obj.SingleShots = strObj.SingleShots;
            obj.CoachSequence = strObj.CoachSequence;
            obj.CoachMessage = strObj.CoachMessage;
            obj.Coach = feval([obj.TeamCommunicationRobotInfoClass '.loadobj'], strObj.Coach);
            PlayersCell = arrayfun(@(x) feval([obj.TeamCommunicationRobotInfoClass '.loadobj'], x), strObj.Players, 'UniformOutput', false);
            obj.Players = vertcat(PlayersCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.TeamNum = obj.TeamNum;
            strObj.TeamColour = obj.TeamColour;
            strObj.Score = obj.Score;
            strObj.PenaltyShot = obj.PenaltyShot;
            strObj.SingleShots = obj.SingleShots;
            strObj.CoachSequence = obj.CoachSequence;
            strObj.CoachMessage = obj.CoachMessage;
            strObj.Coach = saveobj(obj.Coach);
            strObj.Players = arrayfun(@(x) saveobj(x), obj.Players);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.team_communication.teamInfo.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.team_communication.teamInfo;
            obj.reload(strObj);
        end
    end
end
