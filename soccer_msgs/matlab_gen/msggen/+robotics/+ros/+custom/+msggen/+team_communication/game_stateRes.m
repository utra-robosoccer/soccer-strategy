classdef game_stateRes < robotics.ros.Message
    %game_stateRes MATLAB implementation of team_communication/game_stateRes
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'team_communication/game_stateRes' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'e525b70a6249c5a9f7c8b2e5f660d562' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        ProtocolVersion
        Team
        Player
        Message
        Header
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'Message', 'Player', 'ProtocolVersion', 'Team'} % List of non-constant message properties
        ROSPropertyList = {'header', 'message', 'player', 'protocol_version', 'team'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = game_stateRes(msg)
            %game_stateRes Construct the message object game_stateRes
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function protocolversion = get.ProtocolVersion(obj)
            %get.ProtocolVersion Get the value for property ProtocolVersion
            protocolversion = typecast(int8(obj.JavaMessage.getProtocolVersion), 'uint8');
        end
        
        function set.ProtocolVersion(obj, protocolversion)
            %set.ProtocolVersion Set the value for property ProtocolVersion
            validateattributes(protocolversion, {'numeric'}, {'nonempty', 'scalar'}, 'game_stateRes', 'ProtocolVersion');
            
            obj.JavaMessage.setProtocolVersion(protocolversion);
        end
        
        function team = get.Team(obj)
            %get.Team Get the value for property Team
            team = typecast(int8(obj.JavaMessage.getTeam), 'uint8');
        end
        
        function set.Team(obj, team)
            %set.Team Set the value for property Team
            validateattributes(team, {'numeric'}, {'nonempty', 'scalar'}, 'game_stateRes', 'Team');
            
            obj.JavaMessage.setTeam(team);
        end
        
        function player = get.Player(obj)
            %get.Player Get the value for property Player
            player = typecast(int8(obj.JavaMessage.getPlayer), 'uint8');
        end
        
        function set.Player(obj, player)
            %set.Player Set the value for property Player
            validateattributes(player, {'numeric'}, {'nonempty', 'scalar'}, 'game_stateRes', 'Player');
            
            obj.JavaMessage.setPlayer(player);
        end
        
        function message = get.Message(obj)
            %get.Message Get the value for property Message
            message = typecast(int8(obj.JavaMessage.getMessage), 'uint8');
        end
        
        function set.Message(obj, message)
            %set.Message Set the value for property Message
            validateattributes(message, {'numeric'}, {'nonempty', 'scalar'}, 'game_stateRes', 'Message');
            
            obj.JavaMessage.setMessage(message);
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            javaArray = obj.JavaMessage.getHeader;
            array = obj.readJavaArray(javaArray, 'uint8');
            header = uint8(array);
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {'numeric'}, {'vector', 'numel', 4}, 'game_stateRes', 'Header');
            
            javaArray = obj.JavaMessage.getHeader;
            array = obj.writeJavaArray(header, javaArray, 'uint8');
            obj.JavaMessage.setHeader(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ProtocolVersion = obj.ProtocolVersion;
            cpObj.Team = obj.Team;
            cpObj.Player = obj.Player;
            cpObj.Message = obj.Message;
            cpObj.Header = obj.Header;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ProtocolVersion = strObj.ProtocolVersion;
            obj.Team = strObj.Team;
            obj.Player = strObj.Player;
            obj.Message = strObj.Message;
            obj.Header = strObj.Header;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ProtocolVersion = obj.ProtocolVersion;
            strObj.Team = obj.Team;
            strObj.Player = obj.Player;
            strObj.Message = obj.Message;
            strObj.Header = obj.Header;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.team_communication.game_stateRes.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.team_communication.game_stateRes;
            obj.reload(strObj);
        end
    end
end
