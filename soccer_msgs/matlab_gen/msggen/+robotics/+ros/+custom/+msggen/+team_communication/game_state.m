classdef game_state < robotics.ros.Message
    %game_state MATLAB implementation of team_communication/game_state
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'team_communication/game_state' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'a764628174fd87e2d8d1e70307793c91' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        TeamCommunicationTeamInfoClass = robotics.ros.msg.internal.MessageFactory.getClassForType('team_communication/teamInfo') % Dispatch to MATLAB class for message type team_communication/teamInfo
    end
    
    properties (Dependent)
        ProtocolVersion
        PacketNum
        PlayersPerTeam
        GameType
        State
        Firsthalf
        KickoffTeam
        SecondaryState
        DropInTeam
        DropInTime
        SecsRemaining
        SecondaryTime
        Header
        SecondaryStateInfo
        Teams
    end
    
    properties (Access = protected)
        Cache = struct('Teams', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'DropInTeam', 'DropInTime', 'Firsthalf', 'GameType', 'Header', 'KickoffTeam', 'PacketNum', 'PlayersPerTeam', 'ProtocolVersion', 'SecondaryState', 'SecondaryStateInfo', 'SecondaryTime', 'SecsRemaining', 'State', 'Teams'} % List of non-constant message properties
        ROSPropertyList = {'dropInTeam', 'dropInTime', 'firsthalf', 'gameType', 'header', 'kickoffTeam', 'packetNum', 'playersPerTeam', 'protocol_version', 'secondaryState', 'secondaryStateInfo', 'secondaryTime', 'secsRemaining', 'state', 'Teams'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = game_state(msg)
            %game_state Construct the message object game_state
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function protocolversion = get.ProtocolVersion(obj)
            %get.ProtocolVersion Get the value for property ProtocolVersion
            protocolversion = typecast(int16(obj.JavaMessage.getProtocolVersion), 'uint16');
        end
        
        function set.ProtocolVersion(obj, protocolversion)
            %set.ProtocolVersion Set the value for property ProtocolVersion
            validateattributes(protocolversion, {'numeric'}, {'nonempty', 'scalar'}, 'game_state', 'ProtocolVersion');
            
            obj.JavaMessage.setProtocolVersion(protocolversion);
        end
        
        function packetnum = get.PacketNum(obj)
            %get.PacketNum Get the value for property PacketNum
            packetnum = typecast(int8(obj.JavaMessage.getPacketNum), 'uint8');
        end
        
        function set.PacketNum(obj, packetnum)
            %set.PacketNum Set the value for property PacketNum
            validateattributes(packetnum, {'numeric'}, {'nonempty', 'scalar'}, 'game_state', 'PacketNum');
            
            obj.JavaMessage.setPacketNum(packetnum);
        end
        
        function playersperteam = get.PlayersPerTeam(obj)
            %get.PlayersPerTeam Get the value for property PlayersPerTeam
            playersperteam = typecast(int8(obj.JavaMessage.getPlayersPerTeam), 'uint8');
        end
        
        function set.PlayersPerTeam(obj, playersperteam)
            %set.PlayersPerTeam Set the value for property PlayersPerTeam
            validateattributes(playersperteam, {'numeric'}, {'nonempty', 'scalar'}, 'game_state', 'PlayersPerTeam');
            
            obj.JavaMessage.setPlayersPerTeam(playersperteam);
        end
        
        function gametype = get.GameType(obj)
            %get.GameType Get the value for property GameType
            gametype = typecast(int8(obj.JavaMessage.getGameType), 'uint8');
        end
        
        function set.GameType(obj, gametype)
            %set.GameType Set the value for property GameType
            validateattributes(gametype, {'numeric'}, {'nonempty', 'scalar'}, 'game_state', 'GameType');
            
            obj.JavaMessage.setGameType(gametype);
        end
        
        function state = get.State(obj)
            %get.State Get the value for property State
            state = typecast(int8(obj.JavaMessage.getState), 'uint8');
        end
        
        function set.State(obj, state)
            %set.State Set the value for property State
            validateattributes(state, {'numeric'}, {'nonempty', 'scalar'}, 'game_state', 'State');
            
            obj.JavaMessage.setState(state);
        end
        
        function firsthalf = get.Firsthalf(obj)
            %get.Firsthalf Get the value for property Firsthalf
            firsthalf = typecast(int8(obj.JavaMessage.getFirsthalf), 'uint8');
        end
        
        function set.Firsthalf(obj, firsthalf)
            %set.Firsthalf Set the value for property Firsthalf
            validateattributes(firsthalf, {'numeric'}, {'nonempty', 'scalar'}, 'game_state', 'Firsthalf');
            
            obj.JavaMessage.setFirsthalf(firsthalf);
        end
        
        function kickoffteam = get.KickoffTeam(obj)
            %get.KickoffTeam Get the value for property KickoffTeam
            kickoffteam = typecast(int8(obj.JavaMessage.getKickoffTeam), 'uint8');
        end
        
        function set.KickoffTeam(obj, kickoffteam)
            %set.KickoffTeam Set the value for property KickoffTeam
            validateattributes(kickoffteam, {'numeric'}, {'nonempty', 'scalar'}, 'game_state', 'KickoffTeam');
            
            obj.JavaMessage.setKickoffTeam(kickoffteam);
        end
        
        function secondarystate = get.SecondaryState(obj)
            %get.SecondaryState Get the value for property SecondaryState
            secondarystate = typecast(int8(obj.JavaMessage.getSecondaryState), 'uint8');
        end
        
        function set.SecondaryState(obj, secondarystate)
            %set.SecondaryState Set the value for property SecondaryState
            validateattributes(secondarystate, {'numeric'}, {'nonempty', 'scalar'}, 'game_state', 'SecondaryState');
            
            obj.JavaMessage.setSecondaryState(secondarystate);
        end
        
        function dropinteam = get.DropInTeam(obj)
            %get.DropInTeam Get the value for property DropInTeam
            dropinteam = typecast(int8(obj.JavaMessage.getDropInTeam), 'uint8');
        end
        
        function set.DropInTeam(obj, dropinteam)
            %set.DropInTeam Set the value for property DropInTeam
            validateattributes(dropinteam, {'numeric'}, {'nonempty', 'scalar'}, 'game_state', 'DropInTeam');
            
            obj.JavaMessage.setDropInTeam(dropinteam);
        end
        
        function dropintime = get.DropInTime(obj)
            %get.DropInTime Get the value for property DropInTime
            dropintime = typecast(int16(obj.JavaMessage.getDropInTime), 'uint16');
        end
        
        function set.DropInTime(obj, dropintime)
            %set.DropInTime Set the value for property DropInTime
            validateattributes(dropintime, {'numeric'}, {'nonempty', 'scalar'}, 'game_state', 'DropInTime');
            
            obj.JavaMessage.setDropInTime(dropintime);
        end
        
        function secsremaining = get.SecsRemaining(obj)
            %get.SecsRemaining Get the value for property SecsRemaining
            secsremaining = typecast(int16(obj.JavaMessage.getSecsRemaining), 'uint16');
        end
        
        function set.SecsRemaining(obj, secsremaining)
            %set.SecsRemaining Set the value for property SecsRemaining
            validateattributes(secsremaining, {'numeric'}, {'nonempty', 'scalar'}, 'game_state', 'SecsRemaining');
            
            obj.JavaMessage.setSecsRemaining(secsremaining);
        end
        
        function secondarytime = get.SecondaryTime(obj)
            %get.SecondaryTime Get the value for property SecondaryTime
            secondarytime = typecast(int16(obj.JavaMessage.getSecondaryTime), 'uint16');
        end
        
        function set.SecondaryTime(obj, secondarytime)
            %set.SecondaryTime Set the value for property SecondaryTime
            validateattributes(secondarytime, {'numeric'}, {'nonempty', 'scalar'}, 'game_state', 'SecondaryTime');
            
            obj.JavaMessage.setSecondaryTime(secondarytime);
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            javaArray = obj.JavaMessage.getHeader;
            array = obj.readJavaArray(javaArray, 'uint8');
            header = uint8(array);
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {'numeric'}, {'vector', 'numel', 4}, 'game_state', 'Header');
            
            javaArray = obj.JavaMessage.getHeader;
            array = obj.writeJavaArray(header, javaArray, 'uint8');
            obj.JavaMessage.setHeader(array);
        end
        
        function secondarystateinfo = get.SecondaryStateInfo(obj)
            %get.SecondaryStateInfo Get the value for property SecondaryStateInfo
            javaArray = obj.JavaMessage.getSecondaryStateInfo;
            array = obj.readJavaArray(javaArray, 'uint8');
            secondarystateinfo = uint8(array);
        end
        
        function set.SecondaryStateInfo(obj, secondarystateinfo)
            %set.SecondaryStateInfo Set the value for property SecondaryStateInfo
            validateattributes(secondarystateinfo, {'numeric'}, {'vector', 'numel', 4}, 'game_state', 'SecondaryStateInfo');
            
            javaArray = obj.JavaMessage.getSecondaryStateInfo;
            array = obj.writeJavaArray(secondarystateinfo, javaArray, 'uint8');
            obj.JavaMessage.setSecondaryStateInfo(array);
        end
        
        function teams = get.Teams(obj)
            %get.Teams Get the value for property Teams
            if isempty(obj.Cache.Teams)
                javaArray = obj.JavaMessage.getTeams;
                array = obj.readJavaArray(javaArray, obj.TeamCommunicationTeamInfoClass);
                obj.Cache.Teams = feval(obj.TeamCommunicationTeamInfoClass, array);
            end
            teams = obj.Cache.Teams;
        end
        
        function set.Teams(obj, teams)
            %set.Teams Set the value for property Teams
            validateattributes(teams, {obj.TeamCommunicationTeamInfoClass}, {'vector', 'numel', 2}, 'game_state', 'Teams');
            
            javaArray = obj.JavaMessage.getTeams;
            array = obj.writeJavaArray(teams, javaArray, obj.TeamCommunicationTeamInfoClass);
            obj.JavaMessage.setTeams(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Teams)
                obj.Cache.Teams = [];
                obj.Cache.Teams = obj.Teams;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Teams = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ProtocolVersion = obj.ProtocolVersion;
            cpObj.PacketNum = obj.PacketNum;
            cpObj.PlayersPerTeam = obj.PlayersPerTeam;
            cpObj.GameType = obj.GameType;
            cpObj.State = obj.State;
            cpObj.Firsthalf = obj.Firsthalf;
            cpObj.KickoffTeam = obj.KickoffTeam;
            cpObj.SecondaryState = obj.SecondaryState;
            cpObj.DropInTeam = obj.DropInTeam;
            cpObj.DropInTime = obj.DropInTime;
            cpObj.SecsRemaining = obj.SecsRemaining;
            cpObj.SecondaryTime = obj.SecondaryTime;
            cpObj.Header = obj.Header;
            cpObj.SecondaryStateInfo = obj.SecondaryStateInfo;
            
            % Recursively copy compound properties
            cpObj.Teams = copy(obj.Teams);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ProtocolVersion = strObj.ProtocolVersion;
            obj.PacketNum = strObj.PacketNum;
            obj.PlayersPerTeam = strObj.PlayersPerTeam;
            obj.GameType = strObj.GameType;
            obj.State = strObj.State;
            obj.Firsthalf = strObj.Firsthalf;
            obj.KickoffTeam = strObj.KickoffTeam;
            obj.SecondaryState = strObj.SecondaryState;
            obj.DropInTeam = strObj.DropInTeam;
            obj.DropInTime = strObj.DropInTime;
            obj.SecsRemaining = strObj.SecsRemaining;
            obj.SecondaryTime = strObj.SecondaryTime;
            obj.Header = strObj.Header;
            obj.SecondaryStateInfo = strObj.SecondaryStateInfo;
            TeamsCell = arrayfun(@(x) feval([obj.TeamCommunicationTeamInfoClass '.loadobj'], x), strObj.Teams, 'UniformOutput', false);
            obj.Teams = vertcat(TeamsCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ProtocolVersion = obj.ProtocolVersion;
            strObj.PacketNum = obj.PacketNum;
            strObj.PlayersPerTeam = obj.PlayersPerTeam;
            strObj.GameType = obj.GameType;
            strObj.State = obj.State;
            strObj.Firsthalf = obj.Firsthalf;
            strObj.KickoffTeam = obj.KickoffTeam;
            strObj.SecondaryState = obj.SecondaryState;
            strObj.DropInTeam = obj.DropInTeam;
            strObj.DropInTime = obj.DropInTime;
            strObj.SecsRemaining = obj.SecsRemaining;
            strObj.SecondaryTime = obj.SecondaryTime;
            strObj.Header = obj.Header;
            strObj.SecondaryStateInfo = obj.SecondaryStateInfo;
            strObj.Teams = arrayfun(@(x) saveobj(x), obj.Teams);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.team_communication.game_state.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.team_communication.game_state;
            obj.reload(strObj);
        end
    end
end
