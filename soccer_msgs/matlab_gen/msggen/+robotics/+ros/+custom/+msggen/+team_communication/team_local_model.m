classdef team_local_model < robotics.ros.Message
    %team_local_model MATLAB implementation of team_communication/team_local_model
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'team_communication/team_local_model' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '5544e282cdbd4252d30ec1ce390442b0' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        TeamCommunicationLocalModelClass = robotics.ros.msg.internal.MessageFactory.getClassForType('team_communication/local_model') % Dispatch to MATLAB class for message type team_communication/local_model
    end
    
    properties (Dependent)
        RoboID
        Model
    end
    
    properties (Access = protected)
        Cache = struct('Model', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Model', 'RoboID'} % List of non-constant message properties
        ROSPropertyList = {'model', 'roboID'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = team_local_model(msg)
            %team_local_model Construct the message object team_local_model
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function roboid = get.RoboID(obj)
            %get.RoboID Get the value for property RoboID
            roboid = typecast(int8(obj.JavaMessage.getRoboID), 'uint8');
        end
        
        function set.RoboID(obj, roboid)
            %set.RoboID Set the value for property RoboID
            validateattributes(roboid, {'numeric'}, {'nonempty', 'scalar'}, 'team_local_model', 'RoboID');
            
            obj.JavaMessage.setRoboID(roboid);
        end
        
        function model = get.Model(obj)
            %get.Model Get the value for property Model
            if isempty(obj.Cache.Model)
                obj.Cache.Model = feval(obj.TeamCommunicationLocalModelClass, obj.JavaMessage.getModel);
            end
            model = obj.Cache.Model;
        end
        
        function set.Model(obj, model)
            %set.Model Set the value for property Model
            validateattributes(model, {obj.TeamCommunicationLocalModelClass}, {'nonempty', 'scalar'}, 'team_local_model', 'Model');
            
            obj.JavaMessage.setModel(model.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Model)
                obj.Cache.Model.setJavaObject(model.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Model = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.RoboID = obj.RoboID;
            
            % Recursively copy compound properties
            cpObj.Model = copy(obj.Model);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.RoboID = strObj.RoboID;
            obj.Model = feval([obj.TeamCommunicationLocalModelClass '.loadobj'], strObj.Model);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.RoboID = obj.RoboID;
            strObj.Model = saveobj(obj.Model);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.team_communication.team_local_model.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.team_communication.team_local_model;
            obj.reload(strObj);
        end
    end
end
