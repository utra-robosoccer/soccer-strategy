classdef robotInfo < robotics.ros.Message
    %robotInfo MATLAB implementation of team_communication/robotInfo
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'team_communication/robotInfo' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'f5ee272dc9f76de8f445a791ec6b7075' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Penalty
        SecsTillUnpenalised
        YellowCardCount
        RedCardCount
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Penalty', 'RedCardCount', 'SecsTillUnpenalised', 'YellowCardCount'} % List of non-constant message properties
        ROSPropertyList = {'penalty', 'redCardCount', 'secsTillUnpenalised', 'yellowCardCount'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = robotInfo(msg)
            %robotInfo Construct the message object robotInfo
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function penalty = get.Penalty(obj)
            %get.Penalty Get the value for property Penalty
            penalty = typecast(int8(obj.JavaMessage.getPenalty), 'uint8');
        end
        
        function set.Penalty(obj, penalty)
            %set.Penalty Set the value for property Penalty
            validateattributes(penalty, {'numeric'}, {'nonempty', 'scalar'}, 'robotInfo', 'Penalty');
            
            obj.JavaMessage.setPenalty(penalty);
        end
        
        function secstillunpenalised = get.SecsTillUnpenalised(obj)
            %get.SecsTillUnpenalised Get the value for property SecsTillUnpenalised
            secstillunpenalised = typecast(int8(obj.JavaMessage.getSecsTillUnpenalised), 'uint8');
        end
        
        function set.SecsTillUnpenalised(obj, secstillunpenalised)
            %set.SecsTillUnpenalised Set the value for property SecsTillUnpenalised
            validateattributes(secstillunpenalised, {'numeric'}, {'nonempty', 'scalar'}, 'robotInfo', 'SecsTillUnpenalised');
            
            obj.JavaMessage.setSecsTillUnpenalised(secstillunpenalised);
        end
        
        function yellowcardcount = get.YellowCardCount(obj)
            %get.YellowCardCount Get the value for property YellowCardCount
            yellowcardcount = typecast(int8(obj.JavaMessage.getYellowCardCount), 'uint8');
        end
        
        function set.YellowCardCount(obj, yellowcardcount)
            %set.YellowCardCount Set the value for property YellowCardCount
            validateattributes(yellowcardcount, {'numeric'}, {'nonempty', 'scalar'}, 'robotInfo', 'YellowCardCount');
            
            obj.JavaMessage.setYellowCardCount(yellowcardcount);
        end
        
        function redcardcount = get.RedCardCount(obj)
            %get.RedCardCount Get the value for property RedCardCount
            redcardcount = typecast(int8(obj.JavaMessage.getRedCardCount), 'uint8');
        end
        
        function set.RedCardCount(obj, redcardcount)
            %set.RedCardCount Set the value for property RedCardCount
            validateattributes(redcardcount, {'numeric'}, {'nonempty', 'scalar'}, 'robotInfo', 'RedCardCount');
            
            obj.JavaMessage.setRedCardCount(redcardcount);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Penalty = obj.Penalty;
            cpObj.SecsTillUnpenalised = obj.SecsTillUnpenalised;
            cpObj.YellowCardCount = obj.YellowCardCount;
            cpObj.RedCardCount = obj.RedCardCount;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Penalty = strObj.Penalty;
            obj.SecsTillUnpenalised = strObj.SecsTillUnpenalised;
            obj.YellowCardCount = strObj.YellowCardCount;
            obj.RedCardCount = strObj.RedCardCount;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Penalty = obj.Penalty;
            strObj.SecsTillUnpenalised = obj.SecsTillUnpenalised;
            strObj.YellowCardCount = obj.YellowCardCount;
            strObj.RedCardCount = obj.RedCardCount;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.team_communication.robotInfo.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.team_communication.robotInfo;
            obj.reload(strObj);
        end
    end
end
